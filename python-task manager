import tkinter as tk
from tkinter import messagebox

class TaskManager:
    def __init__(self, root):
        self.root = root
        self.root.title("Task Manager")
        self.root.geometry("600x400")

        # Task list
        self.tasks = []

        # Task input fields
        self.task_name_var = tk.StringVar()
        self.task_description_var = tk.StringVar()

        # UI Elements
        self.create_widgets()
        
    def create_widgets(self):
        # Title label
        title_label = tk.Label(self.root, text="Task Manager", font=("Arial", 20))
        title_label.pack(pady=10)

        # Input frame for task details
        input_frame = tk.Frame(self.root)
        input_frame.pack(pady=10)

        # Task Name Entry
        task_name_label = tk.Label(input_frame, text="Task Name:")
        task_name_label.grid(row=0, column=0, padx=10)
        task_name_entry = tk.Entry(input_frame, textvariable=self.task_name_var, width=30)
        task_name_entry.grid(row=0, column=1)

        # Task Description Entry
        task_description_label = tk.Label(input_frame, text="Task Description:")
        task_description_label.grid(row=1, column=0, padx=10)
        task_description_entry = tk.Entry(input_frame, textvariable=self.task_description_var, width=30)
        task_description_entry.grid(row=1, column=1)

        # Add task button
        add_task_button = tk.Button(input_frame, text="Add Task", width=20, command=self.add_task)
        add_task_button.grid(row=2, column=0, columnspan=2, pady=10)

        # Task Listbox with scrollbar
        task_list_frame = tk.Frame(self.root)
        task_list_frame.pack(pady=10)

        self.task_listbox = tk.Listbox(task_list_frame, width=50, height=10, selectmode=tk.SINGLE)
        self.task_listbox.pack(side=tk.LEFT)

        scrollbar = tk.Scrollbar(task_list_frame, orient=tk.VERTICAL, command=self.task_listbox.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.task_listbox.config(yscrollcommand=scrollbar.set)

        # Buttons for task management
        task_button_frame = tk.Frame(self.root)
        task_button_frame.pack(pady=10)

        update_button = tk.Button(task_button_frame, text="Update Task", width=20, command=self.update_task)
        update_button.grid(row=0, column=0, padx=10)

        delete_button = tk.Button(task_button_frame, text="Delete Task", width=20, command=self.delete_task)
        delete_button.grid(row=0, column=1, padx=10)

        complete_button = tk.Button(task_button_frame, text="Complete Task", width=20, command=self.complete_task)
        complete_button.grid(row=1, column=0, padx=10)

        clear_button = tk.Button(task_button_frame, text="Clear All Tasks", width=20, command=self.clear_all_tasks)
        clear_button.grid(row=1, column=1, padx=10)

    def add_task(self):
        task_name = self.task_name_var.get().strip()
        task_description = self.task_description_var.get().strip()

        if task_name == "" or task_description == "":
            messagebox.showwarning("Input Error", "Both fields are required to add a task.")
            return

        self.tasks.append({"name": task_name, "description": task_description, "completed": False})
        self.refresh_task_list()
        self.clear_input_fields()

    def update_task(self):
        selected_task_index = self.task_listbox.curselection()

        if not selected_task_index:
            messagebox.showwarning("Selection Error", "Please select a task to update.")
            return

        selected_task_index = selected_task_index[0]
        task = self.tasks[selected_task_index]

        task_name = self.task_name_var.get().strip()
        task_description = self.task_description_var.get().strip()

        if task_name == "" or task_description == "":
            messagebox.showwarning("Input Error", "Both fields are required to update the task.")
            return

        task["name"] = task_name
        task["description"] = task_description
        self.refresh_task_list()
        self.clear_input_fields()

    def delete_task(self):
        selected_task_index = self.task_listbox.curselection()

        if not selected_task_index:
            messagebox.showwarning("Selection Error", "Please select a task to delete.")
            return

        selected_task_index = selected_task_index[0]
        del self.tasks[selected_task_index]
        self.refresh_task_list()

    def complete_task(self):
        selected_task_index = self.task_listbox.curselection()

        if not selected_task_index:
            messagebox.showwarning("Selection Error", 
